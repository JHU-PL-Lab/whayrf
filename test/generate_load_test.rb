require "erb"

width, depth = ARGV

if [width, depth].any?(&:nil?)
  abort <<-USAGE
Generate load test.

Create Whayrf programs that perform many function pattern matches.

Parameters:

<width>: Integer amount of function pattern matches that are generated at each
         level.

<depth>: Integer amount of levels of nested function pattern matches.

Usage:

  ruby #{__FILE__} <width> <depth>
USAGE
end

width = width.to_i
depth = depth.to_i

if [width, depth].any? { |parameter| parameter <= 0 }
  abort <<-ERROR
It makes no sense to have a non-positive-integer width or depth.
ERROR
end

def render width, depth, current_depth
  if current_depth >= depth
    ""
  else
    safe_level = nil
    trim_mode = "-"
    ERB.new(<<-'WHAYRF', safe_level, trim_mode).result(binding)
<% width.times do |current_width| -%>
  <%- id = "width_#{current_width}_depth_#{current_depth}" -%>
  function_<%= id %> = fun parameter_<%= id %> -> {
    return_function_<%= id %> = parameter_<%= id %>;
  };
  result_of_matching_function_<%= id %> = function_<%= id %> ~ forall pattern_variable_<%= id %>. fun pattern_variable_<%= id %> ~> { pattern_variable_<%= id %> } ?
    match_function_<%= id %> -> {
      <%= render width, depth, (current_depth + 1) -%>
      return_match_function_<%= id %> = {};
    } : antimatch_function_<%= id %> -> {
      return_antimatch_function_<%= id %> = {};
    };
<% end -%>
WHAYRF
  end
end

puts <<-HEADER
# This test was automatically generated by running:
#   ruby #{__FILE__} #{width} #{depth}
#
# You should not attempt to edit it by hand. Instead, refer to `#{__FILE__}'.

HEADER
puts render(width, depth, 0)
