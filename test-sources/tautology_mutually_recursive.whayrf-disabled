# EXPECT-TYPECHECK
# EXPECT-EVALUATE

# This captures the essence of the following snippet from the overview section
# of the paper:
#
# let rec selfMatch1 n:int =
#   case selfMatch2 of
#   int ~> {} -> {}
# and selfMatch2 n:int =
#   case selfMatch1 of
#   int ~> {} -> {}
# in selfMatch1 4

selfMatch1 = fun n -> {
  returnSelfMatch = selfMatch2 ~ fun { int: {} } ~> { {} } ?
    selfMatch1Match -> {
      returnSelfMatchMatch = {}
    } : selfMatch1Antimatch -> {
      bogusFunctionSelfMatchAntimatch = {};
      parameterForBogusFunctionSelfMatchAntimatch = {};
      returnSelfMatchAntimatch = bogusFunctionSelfMatchAntimatch parameterForBogusFunctionSelfMatchAntimatch
    }
};
selfMatch2 = fun n -> {
  returnSelfMatch = selfMatch1 ~ fun { int: {} } ~> { {} } ?
    selfMatch2Match -> {
      returnSelfMatchMatch = {}
    } : selfMatch2Antimatch -> {
      bogusFunctionSelfMatchAntimatch = {};
      parameterForBogusFunctionSelfMatchAntimatch = {};
      returnSelfMatchAntimatch = bogusFunctionSelfMatchAntimatch parameterForBogusFunctionSelfMatchAntimatch
    }
};

intForSelfMatch = {};
parameterForSelfMatch = { int = intForSelfMatch };

return = selfMatch1 parameterForSelfMatch;
