# EXPECT-TYPECHECK
# EXPECT-EVALUATE

# This captures the essence of the following snippet from the overview section
# of the paper:
#
# let rec tautology n:int =
#   case tautology of
#   int ~> {} -> { notInt = {} }
#   int ~> int -> 0
# in
# let return = tautology 4 in
# return.notInt;

yCombinator = fun fYCombinator -> {

  yCombinatorFunction = fun xYCombinatorFunction -> {
    argumentYCombinatorFunction = fun vArgumentYCombinatorFunction -> {
      functionArgumentYCombinatorFunction = xYCombinatorFunction xYCombinatorFunction;
      returnArgumentYCombinatorFunction = functionArgumentYCombinatorFunction vArgumentYCombinatorFunction;
    };
    returnYCombinatorFunction = fYCombinator argumentYCombinatorFunction;
  };

  yCombinatorParameter = fun xYCombinatorParameter -> {
    argumentYCombinatorParameter = fun vArgumentYCombinatorParameter -> {
      functionArgumentYCombinatorParameter = xYCombinatorParameter xYCombinatorParameter;
      returnArgumentYCombinatorParameter = functionArgumentYCombinatorParameter vArgumentYCombinatorParameter;
    };
    returnYCombinatorParameter = fYCombinator argumentYCombinatorParameter;
  };

  returnYCombinator = yCombinatorFunction yCombinatorParameter;
};

partialTautology = fun recursePartialTautology -> {
  returnRecursePartialTautology = fun n -> {
    returnPartialTautology = recursePartialTautology ~ fun { int: {} } ~> { { notInt: {} } } ?
      partialTautologyMatch -> {
        intForPartialTautologyMatch = {};
        returnPartialTautologyMatch = { notInt = intForPartialTautologyMatch }
      } : partialTautologyAntimatch -> {
        returnPartialTautologyAntimatch = partialTautologyAntimatch ~ fun { int: {} } ~> { { int: {} } } ?
          partialTautologyAntimatchMatch -> {
            notIntForPartialTautologyMatch = {};
            returnPartialTautologyAntimatchMatch = { int = notIntForPartialTautologyMatch }
          } : partialTautologyAntimatchAntimatch -> {
            bogusFunctionPartialTautologyAntimatchAntimatch = {};
            parameterForBogusFunctionPartialTautologyAntimatchAntimatch = {};
            returnPartialTautologyAntimatchAntimatch = bogusFunctionPartialTautologyAntimatchAntimatch parameterForBogusFunctionPartialTautologyAntimatchAntimatch
          }
      }
  };
};

tautology = yCombinator partialTautology;

intForTautology = {};
parameterForTautology = { int = intForTautology };

return = tautology parameterForTautology;

scrubbles = return.notInt;
