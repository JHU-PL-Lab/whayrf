# EXPECT-TYPEFAIL

# This captures the essence of the following snippet from the overview section
# of the paper:
#
# let rec paradox n:int =
#   case paradox of
#   int ~> {} -> 0
#   int ~> int -> {}
# in paradox 4

yCombinator = fun fYCombinator -> {

  yCombinatorFunction = fun xYCombinatorFunction -> {
    argumentYCombinatorFunction = fun vArgumentYCombinatorFunction -> {
      functionArgumentYCombinatorFunction = xYCombinatorFunction xYCombinatorFunction;
      returnArgumentYCombinatorFunction = functionArgumentYCombinatorFunction vArgumentYCombinatorFunction;
    };
    returnYCombinatorFunction = fYCombinator argumentYCombinatorFunction;
  };

  yCombinatorParameter = fun xYCombinatorParameter -> {
    argumentYCombinatorParameter = fun vArgumentYCombinatorParameter -> {
      functionArgumentYCombinatorParameter = xYCombinatorParameter xYCombinatorParameter;
      returnArgumentYCombinatorParameter = functionArgumentYCombinatorParameter vArgumentYCombinatorParameter;
    };
    returnYCombinatorParameter = fYCombinator argumentYCombinatorParameter;
  };

  returnYCombinator = yCombinatorFunction yCombinatorParameter;
};

partialParadox = fun recursePartialParadox -> {
  returnRecursePartialParadox = fun n -> {
    returnPartialParadox = recursePartialParadox ~ fun { int: {} } ~> { { notInt: {} } } ?
      partialParadoxMatch -> {
        intForPartialParadoxMatch = {};
        returnPartialParadoxMatch = { int = intForPartialParadoxMatch }
      } : partialParadoxAntimatch -> {
        returnPartialParadoxAntimatch = partialParadoxAntimatch ~ fun { int: {} } ~> { { int: {} } } ?
          partialParadoxAntimatchMatch -> {
            notIntForPartialParadoxMatch = {};
            returnPartialParadoxAntimatchMatch = { notInt = notIntForPartialParadoxMatch }
          } : partialParadoxAntimatchAntimatch -> {
            bogusFunctionPartialParadoxAntimatchAntimatch = {};
            parameterForBogusFunctionPartialParadoxAntimatchAntimatch = {};
            returnPartialParadoxAntimatchAntimatch = bogusFunctionPartialParadoxAntimatchAntimatch parameterForBogusFunctionPartialParadoxAntimatchAntimatch
          }
      }
  };
};

paradox = yCombinator partialParadox;

intForParadox = {};
parameterForParadox = { int = intForParadox };

return = paradox parameterForParadox;
